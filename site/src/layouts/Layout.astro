---
import '../styles/tailwind.css';
import trigUrl from '../scripts/trig.min.js?url';
import materialColorsUrl from '../scripts/material-colors.ts?url';
const { title = 'BSharp' } = Astro.props;
const rawBase = import.meta.env.BASE_URL || '/';
const base = rawBase.endsWith('/') ? rawBase : `${rawBase}/`;
---
<!doctype html>
<html lang="en" class="dark scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="image/svg+xml" href={`${base}favicon.svg`} />
    <meta name="generator" content={Astro.generator} />
    <meta name="color-scheme" content="light dark" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/trig-js/src/trig-animations.min.css" />
    <script src={trigUrl} defer></script>
    <script type="module" src={materialColorsUrl}></script>
    <title>{title}</title>
  </head>
  <body class="relative min-h-dvh bg-white text-slate-900 dark:bg-slate-950 dark:text-slate-100">
    <div class="pointer-events-none fixed inset-0 -z-10 vignette"></div>
    <header class="sticky top-0 z-40 border-b border-white/10 bg-white/5 backdrop-blur-xl shadow-[0_1px_0_0_rgba(255,255,255,0.06)]">
      <nav class="mx-auto flex max-w-7xl items-center justify-between gap-6 px-4 py-3">
        <a href={base} class="bsharp-logo font-semibold tracking-tight">B#</a>
        <ul class="flex items-center gap-5 text-sm flex-1 justify-center">
          <li><a class="nav-link nav-parser" href="#parser">Parser</a></li>
          <li><a class="nav-link nav-formatter" href="#formatter">Formatter</a></li>
          <li><a class="nav-link nav-analysis" href="#analysis">Analysis</a></li>
          <li><a class="nav-link nav-roadmap" href="#roadmap">Roadmap</a></li>
        </ul>
        <div class="flex items-center gap-3">
          <a class="btn btn-mc-primary" href="#install">Install</a>
          <a class="btn btn-mc-outline" href={`${base}docs/`}>Docs</a>
        </div>
      </nav>
    </header>
    <main class="w-full">
      <slot />
    </main>
    <!-- Floating Back-to-Top -->
    <button
      id="fab-back-to-top"
      class="fab"
      aria-label="Back to top"
      type="button"
      onclick="window.scrollTo({ top: 0, behavior: 'smooth' })"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="h-5 w-5 fab-icon"
      >
        <polyline points="18 15 12 9 6 15"></polyline>
      </svg>
    </button>
    <script type="module">
      // Ensure FAB inherits palette from the current visible section
      function updateFabPalette() {
        const fab = document.getElementById('fab-back-to-top');
        if (!fab) return;
        // Hide FAB when in hero section
        const heroSection = document.querySelector('.section');
        const heroRect = heroSection?.getBoundingClientRect();
        if (heroRect && heroRect.bottom > window.innerHeight * 0.8) {
          fab.style.display = 'none';
          return;
        }
        fab.style.display = '';
        // Find the section that’s currently most in view
        const sections = Array.from(document.querySelectorAll('section[data-mc-seed]'));
        let closest = null;
        let minDist = Infinity;
        sections.forEach(sec => {
          const rect = sec.getBoundingClientRect();
          const dist = Math.abs(rect.top + rect.height / 2 - window.innerHeight / 2);
          if (dist < minDist) {
            minDist = dist;
            closest = sec;
          }
        });
        if (closest) {
          const computed = getComputedStyle(closest);
          const root = document.documentElement;
          const navbar = document.querySelector('header');
          
          // Update FAB colors
          if (fab) {
            fab.style.setProperty('--mc-surface-variant', computed.getPropertyValue('--mc-surface-variant'));
            fab.style.setProperty('--mc-outline-variant', computed.getPropertyValue('--mc-outline-variant'));
            fab.style.setProperty('--mc-primary', computed.getPropertyValue('--mc-primary'));
          }
          
          // Update navbar colors for proper button styling
          if (navbar) {
            navbar.style.setProperty('--mc-primary', computed.getPropertyValue('--mc-primary'));
            navbar.style.setProperty('--mc-on-primary', computed.getPropertyValue('--mc-on-primary'));
            navbar.style.setProperty('--mc-secondary', computed.getPropertyValue('--mc-secondary'));
            navbar.style.setProperty('--mc-surface', computed.getPropertyValue('--mc-surface'));
            navbar.style.setProperty('--mc-surface-variant', computed.getPropertyValue('--mc-surface-variant'));
            navbar.style.setProperty('--mc-outline', computed.getPropertyValue('--mc-outline'));
            navbar.style.setProperty('--mc-outline-variant', computed.getPropertyValue('--mc-outline-variant'));
          }
          
          // Update global background animation colors
          root.style.setProperty('--bg-primary', computed.getPropertyValue('--mc-primary'));
          root.style.setProperty('--bg-secondary', computed.getPropertyValue('--mc-secondary') || computed.getPropertyValue('--mc-primary'));
          root.style.setProperty('--bg-tertiary', computed.getPropertyValue('--mc-tertiary') || computed.getPropertyValue('--mc-primary-container'));
          // Update blob colors for aurora effect
          root.style.setProperty('--blob-primary', computed.getPropertyValue('--mc-primary'));
          root.style.setProperty('--blob-secondary', computed.getPropertyValue('--mc-secondary') || computed.getPropertyValue('--mc-primary-container'));
          root.style.setProperty('--blob-tertiary', computed.getPropertyValue('--mc-tertiary') || computed.getPropertyValue('--mc-tertiary-container'));
        }
      }
      // Update palette on scroll and on load
      window.addEventListener('scroll', updateFabPalette, { passive: true });
      window.addEventListener('resize', updateFabPalette, { passive: true });
      document.addEventListener('DOMContentLoaded', updateFabPalette);
      // Also update when dark mode toggles
      const mo = new MutationObserver(updateFabPalette);
      mo.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
    </script>
    <footer class="border-t border-slate-200/60 px-4 py-8 text-center text-xs text-slate-500 dark:border-slate-800/60">
      <p class="flex items-center justify-center gap-1">
        <span>{new Date().getFullYear()} BSharp</span>
        <span class="mx-2">•</span>
        <span>Made with</span>
        <svg class="h-3 w-3 text-red-500" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clip-rule="evenodd" />
        </svg>
        <span>by Cybernomad</span>
      </p>
    </footer>
    
    <style>
      /* B# logo glassy gradient animation */
      .bsharp-logo {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 25%, #f093fb 50%, #feca57 75%, #48c774 100%);
        background-size: 400% 400%;
        -webkit-background-clip: text;
        background-clip: text;
        -webkit-text-fill-color: transparent;
        animation: gradient-shift 8s ease infinite;
        filter: drop-shadow(0 0 20px rgba(102, 126, 234, 0.3));
        backdrop-filter: blur(10px);
        position: relative;
      }
      
      .bsharp-logo::before {
        content: 'B#';
        position: absolute;
        top: 0;
        left: 0;
        z-index: -1;
        background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
        -webkit-background-clip: text;
        background-clip: text;
        -webkit-text-fill-color: transparent;
        filter: blur(8px);
      }
      
      @keyframes gradient-shift {
        0% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
        100% { background-position: 0% 50%; }
      }
      
      /* Nav link colors */
      .nav-link {
        transition: all 0.3s ease;
        position: relative;
      }
      
      .nav-link::after {
        content: '';
        position: absolute;
        bottom: -2px;
        left: 0;
        width: 0;
        height: 2px;
        transition: width 0.3s ease;
      }
      
      .nav-parser { color: #4edea3; }
      .nav-parser::after { background: #4edea3; }
      .nav-parser:hover { color: #10B981; }
      
      .nav-formatter { color: #bbc3ff; }
      .nav-formatter::after { background: #bbc3ff; }
      .nav-formatter:hover { color: #3949AB; }
      
      .nav-analysis { color: #ffb870; }
      .nav-analysis::after { background: #ffb870; }
      .nav-analysis:hover { color: #FF9800; }
      
      .nav-roadmap { color: #fbbf24; }
      .nav-roadmap::after { background: #fbbf24; }
      .nav-roadmap:hover { color: #f59e0b; }
      
      .nav-link.active::after {
        width: 100%;
      }
    </style>
    
    <script type="module">
      // Update active nav link based on current section
      function updateActiveNavLink() {
        const sections = ['parser', 'formatter', 'analysis', 'roadmap'];
        const navLinks = {
          parser: document.querySelector('.nav-parser'),
          formatter: document.querySelector('.nav-formatter'),
          analysis: document.querySelector('.nav-analysis'),
          roadmap: document.querySelector('.nav-roadmap')
        };
        
        // Remove active class from all links
        Object.values(navLinks).forEach(link => link?.classList.remove('active'));
        
        // Find current section
        const scrollPosition = window.scrollY + 100;
        let currentSection = '';
        
        sections.forEach(sectionId => {
          const section = document.getElementById(sectionId);
          if (section) {
            const sectionTop = section.offsetTop;
            const sectionHeight = section.offsetHeight;
            
            if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) {
              currentSection = sectionId;
            }
          }
        });
        
        // Add active class to current section's nav link
        if (currentSection && navLinks[currentSection]) {
          navLinks[currentSection].classList.add('active');
        }
      }
      
      // Update on scroll and load
      window.addEventListener('scroll', updateActiveNavLink, { passive: true });
      document.addEventListener('DOMContentLoaded', updateActiveNavLink);
    </script>
  </body>
</html>
