---
interface Props {
  id?: string;
  value?: string;
  language?: string;
  theme?: string;
  onChange?: (value: string) => void;
  placeholder?: string;
  height?: string;
}

const { 
  id,
  value = "public class TestClass { public void Loops(){ System.Console.WriteLine(\"test\"); } }",
  language = "csharp",
  theme = "glass",
  onChange,
  placeholder = "// Enter C# code here...",
  height = "200px"
} = Astro.props;

let containerId = id || `monaco-editor-${Math.random().toString(36).substr(2, 9)}`;
---

<div id={containerId} class="monaco-editor-container" style={`height: ${height};`}></div>

<script type="module">
  import * as monaco from 'monaco-editor';
  
  // Make Monaco available globally for other scripts
  window.monaco = monaco;
  
  // Initialize global editors object if not exists
  if (!window.monacoEditors) {
    window.monacoEditors = {};
  }
  
  // Define glass theme for Monaco
  monaco.editor.defineTheme('glass', {
    base: 'vs-dark',
    inherit: true,
    rules: [
      { token: 'comment', foreground: '64748b', fontStyle: 'italic' },
      { token: 'keyword', foreground: 'f472b6' },
      { token: 'string', foreground: '34d399' },
      { token: 'number', foreground: '60a5fa' },
      { token: 'type', foreground: 'a78bfa' },
      { token: 'class.name', foreground: 'fbbf24' },
      { token: 'function', foreground: '34d399' },
      { token: 'variable', foreground: 'e2e8f0' },
    ],
    colors: {
      'editor.background': '#00000000', // Transparent
      'editor.foreground': '#e2e8f0',
      'editor.lineHighlightBackground': '#ffffff08',
      'editor.selectionBackground': '#ffffff15',
      'editor.inactiveSelectionBackground': '#ffffff08',
      'editorCursor.foreground': '#f472b6',
      'editorWhitespace.foreground': '#64748b40',
      'editorIndentGuide.background': '#64748b20',
      'editorIndentGuide.activeBackground': '#64748b40',
      'editorLineNumber.foreground': '#64748b60',
      'editorLineNumber.activeForeground': '#e2e8f0',
      'editorWidget.background': '#1e293b80',
      'editorWidget.border': '#33415540',
      'editorSuggestWidget.background': '#1e293b90',
      'editorSuggestWidget.border': '#33415540',
      'editorSuggestWidget.selectedBackground': '#33415540',
      'scrollbar.background': '#00000000',
      'scrollbarSlider.background': '#64748b40',
      'scrollbarSlider.hoverBackground': '#64748b60',
      'scrollbarSlider.activeBackground': '#64748b80',
      'minimap.background': '#00000000',
      'minimapSlider.background': '#64748b40',
      'minimapSlider.hoverBackground': '#64748b60',
      'minimapSlider.activeBackground': '#64748b80',
    }
  });

  // Initialize editor immediately when DOM is ready
  function initEditor() {
    const container = document.getElementById('{containerId}');
    if (!container) return;

    // Get current section's Material colors
    const section = container.closest('section[data-mc-seed]');
    const sectionStyle = getComputedStyle(section);
    
    // Create custom theme based on section colors
    const customThemeName = 'glass-custom-' + section.id;
    monaco.editor.defineTheme(customThemeName, {
      base: 'vs-dark',
      inherit: true,
      rules: [
        { token: 'comment', foreground: '64748b', fontStyle: 'italic' },
        { token: 'keyword', foreground: sectionStyle.getPropertyValue('--mc-primary').slice(1) },
        { token: 'string', foreground: sectionStyle.getPropertyValue('--mc-tertiary').slice(1) },
        { token: 'number', foreground: sectionStyle.getPropertyValue('--mc-secondary').slice(1) },
        { token: 'type', foreground: sectionStyle.getPropertyValue('--mc-analogous1').slice(1) },
        { token: 'class.name', foreground: sectionStyle.getPropertyValue('--mc-complementary').slice(1) },
        { token: 'function', foreground: sectionStyle.getPropertyValue('--mc-tertiary').slice(1) },
        { token: 'variable', foreground: sectionStyle.getPropertyValue('--mc-on-surface').slice(1) },
      ],
      colors: {
        'editor.background': '#00000000', // Transparent
        'editor.foreground': sectionStyle.getPropertyValue('--mc-on-surface'),
        'editor.lineHighlightBackground': colorMix(sectionStyle.getPropertyValue('--mc-primary'), '0.08'),
        'editor.selectionBackground': colorMix(sectionStyle.getPropertyValue('--mc-primary'), '0.15'),
        'editor.inactiveSelectionBackground': colorMix(sectionStyle.getPropertyValue('--mc-primary'), '0.08'),
        'editorCursor.foreground': sectionStyle.getPropertyValue('--mc-primary'),
        'editorWhitespace.foreground': colorMix(sectionStyle.getPropertyValue('--mc-outline'), '0.4'),
        'editorIndentGuide.background': colorMix(sectionStyle.getPropertyValue('--mc-outline'), '0.2'),
        'editorIndentGuide.activeBackground': colorMix(sectionStyle.getPropertyValue('--mc-outline'), '0.4'),
        'editorLineNumber.foreground': colorMix(sectionStyle.getPropertyValue('--mc-outline'), '0.6'),
        'editorLineNumber.activeForeground': sectionStyle.getPropertyValue('--mc-on-surface'),
        'editorWidget.background': colorMix(sectionStyle.getPropertyValue('--mc-surface'), '0.5'),
        'editorWidget.border': colorMix(sectionStyle.getPropertyValue('--mc-outline'), '0.4'),
        'scrollbar.background': '#00000000',
        'scrollbarSlider.background': colorMix(sectionStyle.getPropertyValue('--mc-outline'), '0.4'),
        'scrollbarSlider.hoverBackground': colorMix(sectionStyle.getPropertyValue('--mc-outline'), '0.6'),
        'scrollbarSlider.activeBackground': colorMix(sectionStyle.getPropertyValue('--mc-outline'), '0.8'),
        'minimap.background': '#00000000',
        'minimapSlider.background': colorMix(sectionStyle.getPropertyValue('--mc-outline'), '0.4'),
        'minimapSlider.hoverBackground': colorMix(sectionStyle.getPropertyValue('--mc-outline'), '0.6'),
        'minimapSlider.activeBackground': colorMix(sectionStyle.getPropertyValue('--mc-outline'), '0.8'),
      }
    });

    // Create editor
    const editor = monaco.editor.create(container, {
      value: '{value}',
      language: '{language}',
      theme: customThemeName,
      automaticLayout: true,
      minimap: { enabled: false },
      scrollBeyondLastLine: false,
      fontSize: 14,
      fontFamily: 'JetBrains Mono, Fira Code, Consolas, monospace',
      lineHeight: 1.6,
      padding: { top: 12, bottom: 12 },
      roundedSelection: false,
      cursorStyle: 'line',
      wordWrap: 'on',
      bracketPairColorization: { enabled: true },
      guides: {
        indentation: true,
        bracketPairs: true
      },
      suggest: {
        showKeywords: true,
        showSnippets: true
      }
    });

    // Store editor instance globally
    window.monacoEditors['{containerId}'] = editor;

    // Add change handler if provided
    {onChange && `
      editor.onDidChangeModelContent(() => {
        const value = editor.getValue();
        onChange(value);
      });
    `}

    // Update theme when section colors change
    const observer = new MutationObserver(() => {
      const newSectionStyle = getComputedStyle(section);
      monaco.editor.defineTheme(customThemeName, {
        base: 'vs-dark',
        inherit: true,
        rules: [
          { token: 'comment', foreground: '64748b', fontStyle: 'italic' },
          { token: 'keyword', foreground: newSectionStyle.getPropertyValue('--mc-primary').slice(1) },
          { token: 'string', foreground: newSectionStyle.getPropertyValue('--mc-tertiary').slice(1) },
          { token: 'number', foreground: newSectionStyle.getPropertyValue('--mc-secondary').slice(1) },
          { token: 'type', foreground: newSectionStyle.getPropertyValue('--mc-analogous1').slice(1) },
          { token: 'class.name', foreground: newSectionStyle.getPropertyValue('--mc-complementary').slice(1) },
          { token: 'function', foreground: newSectionStyle.getPropertyValue('--mc-tertiary').slice(1) },
          { token: 'variable', foreground: newSectionStyle.getPropertyValue('--mc-on-surface').slice(1) },
        ],
        colors: {
          'editor.background': '#00000000',
          'editor.foreground': newSectionStyle.getPropertyValue('--mc-on-surface'),
          'editor.lineHighlightBackground': colorMix(newSectionStyle.getPropertyValue('--mc-primary'), '0.08'),
          'editor.selectionBackground': colorMix(newSectionStyle.getPropertyValue('--mc-primary'), '0.15'),
          'editor.inactiveSelectionBackground': colorMix(newSectionStyle.getPropertyValue('--mc-primary'), '0.08'),
          'editorCursor.foreground': newSectionStyle.getPropertyValue('--mc-primary'),
          'editorWhitespace.foreground': colorMix(newSectionStyle.getPropertyValue('--mc-outline'), '0.4'),
          'editorIndentGuide.background': colorMix(newSectionStyle.getPropertyValue('--mc-outline'), '0.2'),
          'editorIndentGuide.activeBackground': colorMix(newSectionStyle.getPropertyValue('--mc-outline'), '0.4'),
          'editorLineNumber.foreground': colorMix(newSectionStyle.getPropertyValue('--mc-outline'), '0.6'),
          'editorLineNumber.activeForeground': newSectionStyle.getPropertyValue('--mc-on-surface'),
          'editorWidget.background': colorMix(newSectionStyle.getPropertyValue('--mc-surface'), '0.5'),
          'editorWidget.border': colorMix(newSectionStyle.getPropertyValue('--mc-outline'), '0.4'),
          'scrollbar.background': '#00000000',
          'scrollbarSlider.background': colorMix(newSectionStyle.getPropertyValue('--mc-outline'), '0.4'),
          'scrollbarSlider.hoverBackground': colorMix(newSectionStyle.getPropertyValue('--mc-outline'), '0.6'),
          'scrollbarSlider.activeBackground': colorMix(newSectionStyle.getPropertyValue('--mc-outline'), '0.8'),
          'minimap.background': '#00000000',
          'minimapSlider.background': colorMix(newSectionStyle.getPropertyValue('--mc-outline'), '0.4'),
          'minimapSlider.hoverBackground': colorMix(newSectionStyle.getPropertyValue('--mc-outline'), '0.6'),
          'minimapSlider.activeBackground': colorMix(newSectionStyle.getPropertyValue('--mc-outline'), '0.8'),
        }
      });
      monaco.editor.setTheme(customThemeName);
    });
    
    observer.observe(section, { attributes: true, attributeFilter: ['style'] });
  }

  // Initialize immediately or wait for DOM
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initEditor);
  } else {
    // Use setTimeout to ensure DOM is ready and Material colors are applied
    setTimeout(initEditor, 100);
  }

  // Helper function to mix colors
  function colorMix(hex, alpha) {
    const r = parseInt(hex.slice(1, 3), 16);
    const g = parseInt(hex.slice(3, 5), 16);
    const b = parseInt(hex.slice(5, 7), 16);
    return `#${Math.round(r * alpha).toString(16).padStart(2, '0')}${Math.round(g * alpha).toString(16).padStart(2, '0')}${Math.round(b * alpha).toString(16).padStart(2, '0')}`;
  }
</script>

<style>
  .monaco-editor-container {
    border-radius: 0.5rem;
    overflow: hidden;
    backdrop-filter: blur(8px);
    background: color-mix(in oklab, var(--mc-surface-variant) 15%, transparent);
    border: 1px solid color-mix(in oklab, var(--mc-outline-variant) 30%, transparent);
  }
  
  .monaco-editor-container :global(.monaco-editor) {
    background: transparent !important;
  }
  
  .monaco-editor-container :global(.margin) {
    background: transparent !important;
  }
</style>
