---
import MonacoInstance from './MonacoInstance.astro';
const sample = `public class TestClass { public void Loops(){ System.Console.WriteLine("test"); } }`;
const rawBase = import.meta.env.BASE_URL || '/';
const base = rawBase.endsWith('/') ? rawBase : `${rawBase}/`;
---
<section class="w-full px-4 py-8 md:px-8">
  <div class="prose prose-slate dark:prose-invert">
    <h2>Formatter</h2>
    <p>Consistent formatting enhances readability and keeps diffs stable.</p>
  </div>
  <div class="mt-6 grid gap-4 md:grid-cols-2">
    <div>
      <div class="mb-2 text-sm text-slate-500">Input C#</div>
      <MonacoInstance id="fmt-monaco" initial={sample} height="460px" />
      <div class="mt-3 flex gap-2">
        <button id="fmt-run" class="btn btn-primary">Format</button>
      </div>
    </div>
    <div>
      <div class="mb-2 text-sm text-slate-500">Formatted</div>
      <pre id="fmt-out" class="h-[460px] w-full overflow-auto rounded-md border border-white/10 bg-black/30 p-3 font-mono text-[13px] leading-6 text-slate-100"></pre>
    </div>
  </div>
</section>

<script type="module" define:vars={{ base }}>
  function wasmUrl() {
    const b = base.endsWith('/') ? base : `${base}/`;
    return new URL(`${b}wasm/bsharp_wasm.js`, window.location.origin).toString();
  }
  const $ = (s) => document.querySelector(s);
  const cout = $('#fmt-out');
  const btn = $('#fmt-run');
  async function loadWasm(){
    const mod = await import(wasmUrl());
    if (mod && mod.default) await mod.default();
    return mod;
  }
  function getEditor(){
    return window.__monacoEditors?.['fmt-monaco'];
  }
  async function ensureEditor(){
    const start = Date.now();
    while (!getEditor() && Date.now() - start < 2000) await new Promise(r => setTimeout(r, 50));
    if (!getEditor()) console.warn('Monaco editor instance not found after timeout');
    return getEditor();
  }
  btn?.addEventListener('click', async () => {
    try {
      const mod = await loadWasm();
      const ed = await ensureEditor();
      const res = await mod.format_code(ed.getValue());
      cout.textContent = res;
    } catch(e) {
      cout.textContent = 'Format error: ' + (e?.message || String(e));
    }
  });
  window.addEventListener('load', () => btn?.click());
</script>
