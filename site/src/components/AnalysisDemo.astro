---
import MonacoInstance from './MonacoInstance.astro';
const sample = `public class Example
{
    int Add(int a, int b) { return a + b; }
}`;
const rawBase = import.meta.env.BASE_URL || '/';
const base = rawBase.endsWith('/') ? rawBase : `${rawBase}/`;
---
<section class="relative mx-auto w-full max-w-6xl">
  <div class="glass mx-auto max-w-6xl p-4 md:p-6">
    <div class="prose prose-slate dark:prose-invert">
      <h3>Analysis (live)</h3>
      <p>Run the analysis pipeline in your browser and inspect the JSON report.</p>
    </div>
    <div class="mt-4 grid gap-4 md:grid-cols-2">
      <div>
        <label class="mb-2 block text-sm text-slate-500">Input C#</label>
        <MonacoInstance id="analysis-monaco" initial={sample} height="256px" />
        <div class="mt-3 flex gap-2">
          <button id="an-run" class="btn btn-primary">Analyze</button>
        </div>
      </div>
      <div>
        <label class="mb-2 block text-sm text-slate-500">Report (JSON)</label>
        <pre id="an-out" class="h-64 w-full overflow-auto rounded-md border border-white/10 bg-black/30 p-3 font-mono text-sm text-slate-100"></pre>
      </div>
    </div>
  </div>
</section>

<script type="module" define:vars={{ base }}>
  function wasmUrl() {
    const b = base.endsWith('/') ? base : `${base}/`;
    return new URL(`${b}wasm/bsharp_wasm.js`, window.location.origin).toString();
  }
  (function(){
    async function loadWasm(){
      const mod = await import(wasmUrl());
      if (mod && mod.default) await mod.default();
      return mod;
    }
    const $ = (s) => document.querySelector(s);
    const cout = $('#an-out');
    const btn = $('#an-run');
    function getEditor(){ return window.__monacoEditors?.['analysis-monaco']; }
  async function ensureEditor(){
    const start = Date.now();
    while (!getEditor() && Date.now() - start < 2000) await new Promise(r => setTimeout(r, 50));
    if (!getEditor()) console.warn('Monaco editor instance not found after timeout');
    return getEditor();
  }
    btn?.addEventListener('click', async () => {
      try {
        const mod = await loadWasm();
        const ed = await ensureEditor();
        const json = await mod.analyze_code(ed.getValue());
        cout.textContent = json;
      } catch(e) {
        cout.textContent = 'Analysis error: ' + (e?.message || String(e));
      }
    });
    window.addEventListener('load', () => btn?.click());
  })();
</script>
