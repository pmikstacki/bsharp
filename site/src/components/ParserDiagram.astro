---
import MonacoInstance from './MonacoInstance.astro';
const sample = `public class TestClass
{
    public void Hello() { System.Console.WriteLine("hi"); }
}`;
const rawBase = import.meta.env.BASE_URL || '/';
const base = rawBase.endsWith('/') ? rawBase : `${rawBase}/`;
---
<section class="w-full px-4 py-8 md:px-8">
  <p style="color: var(--mc-on-surface-variant)">Try it yourself: paste C# code below and visualize its abstract syntax tree in real-time.</p>
  <div class="mt-6 grid gap-4 md:grid-cols-2">
    <div>
      <div class="mb-2 text-sm" style="color: var(--mc-on-surface-variant)">Input C#</div>
      <MonacoInstance id="parser-monaco" initial={sample} height="460px" />
      <div class="mt-3">
        <button id="btn" class="btn btn-mc-primary">Render AST (Mermaid)</button>
      </div>
    </div>
    <div>
      <div class="mb-2 text-sm" style="color: var(--mc-on-surface-variant)">Diagram</div>
      <div id="mermaid-wrap" class="h-[460px] w-full overflow-auto rounded-md p-3" style="border: 1px solid color-mix(in oklab, var(--mc-outline-variant) 30%, transparent); background: color-mix(in oklab, var(--mc-surface-variant) 10%, transparent);">
        <div id="m-target" class="mermaid">graph TD; A["No graph yet"]</div>
      </div>
    </div>
  </div>
</section>

<script type="module" define:vars={{ base }}>
  import { renderMermaid } from '/src/scripts/mermaid-setup.ts';
  function wasmUrl() {
    const b = base.endsWith('/') ? base : `${base}/`;
    return new URL(`${b}wasm/bsharp_wasm.js`, window.location.origin).toString();
  }
  (function(){
    async function wasm(){
      const m = await import(wasmUrl());
      if (m && m.default) await m.default();
      return m;
    }
    const $ = (s)=>document.querySelector(s);
    const btn = $('#btn');
    const target = $('#m-target');
    function getEditor(){ return window.__monacoEditors?.['parser-monaco']; }
  async function ensureEditor(){
    const start = Date.now();
    while (!getEditor() && Date.now() - start < 2000) await new Promise(r => setTimeout(r, 50));
    if (!getEditor()) console.warn('Monaco editor instance not found after timeout');
    return getEditor();
  }
  btn?.addEventListener('click', async () => {
    try {
      const mod = await wasm();
      const ed = await ensureEditor();
      const diag = await mod.ast_to_mermaid(ed.getValue());
      const id = 'ast-' + Math.random().toString(36).slice(2);
      await renderMermaid(target, id, diag);
    } catch (e) {
      target.textContent = 'Mermaid render error: ' + (e?.message || String(e));
    }
  });
  window.addEventListener('load', () => btn?.click());
  })();
</script>

<style is:inline>
  :global(#mermaid-wrap) { width: 100%; height: 460px; overflow: hidden; }
  :global(#mermaid-wrap svg) { width: 100%; height: 100%; }
  :global(#mermaid-wrap svg *) { vector-effect: non-scaling-stroke; }
  :global(#mermaid-wrap .merge-haze) { position: absolute; inset: 0; pointer-events: none; }
</style>
